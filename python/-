#!/usr/bin/env python
import sys

import numpy as np

import scipy
import scipy.special as ss
import scipy.special.orthogonal as so
import scipy.linalg as la
from copy import *
from potential2 import *

from axis import *

n=40
order=3
bctype='x'

lb=-2.
ub=2.

y=Axis(bctype,n,lb,ub,'fem',order)#+Axis('x',n,lb,ub,'fem',order)#+Axis('r',2,2.,3.,'fem')

#y.plot()
#plt.show()
npart=np.floor(n/(order-1))

if bctype=='cos':
        nelem=npart*(order-1)+1
elif bctype=='r' or bctype=='rho':
        nelem=npart*(order-1)
else:
        nelem=npart*(order-1)-1

#Overlap Matrix
overlap=y.overlap()
overlap_inv=y.overlap_inv()

#d|d matrix
B=np.zeros([nelem,nelem])
#Potential Matrix
V=np.zeros([nelem,nelem])

#Scattering Energy
E=20

#Control Parameter
Lambda=1

iter1=0

#Coefficient Matrix
U=np.zeros(nelem)

for e in y.e:
#       for b in e.b:
        b=e.matrix('d|d')
        v=e.matrix('pot')
        iter2=int(np.sqrt(np.size(b)))
        for k1 in range(0,iter2):
                for k2 in range(0,iter2):
                        B[iter1+k1,iter1+k2]=B[iter1+k1,iter1+k2]+b[k1][k2]
                        V[iter1+k1,iter1+k2]=V[iter1+k1,iter1+k2]+v[k1][k2]
        iter1=iter1+iter2-1


A=la.inv(E*y.overlap()-B/2+0.5j)
G0=A
tempmat=np.dot(G0,V)

for k in range(0,7):
	A=G0+np.dot(tempmat,A)

Aex=la.inv(E*y.overlap()-B/2-V+.5j)
#a=np.array([ (1j,0), (0,1j)])
#print A
#print Aex

print la.det(A-Aex)

#[evals,evecs]=la.eig(B/2+V,y.overlap())

#print evals
