#!/usr/bin/env python
import sys

import numpy as np
#import my_pyplot
#import matplotlib as plt

import scipy
import scipy.special as ss
import scipy.special.orthogonal as so
import scipy.linalg as la
from copy import *

#from math import *
#import cmath

#from array import array

from axis import *

def pot(x):
	V=np.zeros(len(x))
	for k in range(len(x)):
		if x[k] < 1.:
			V[k]=0
		elif x[k] > 0.:
			V[k]=0
		else:
			V[k]=myInf

#	V=-np.exp(-x*x/(2*myPi*5))
	return V

n=6
order=3
bctype='x'

E=myPi*myPi/2;

#mat_size=
	
y=Axis(bctype,n,0.,1.,'fem',order)#+Axis('x',9,0.,3.,'fem',4)#+Axis('r',2,2.,3.,'fem')

npart=np.floor(n/(order-1))

if bctype=='cos':
	nelem=n+1
elif bctype=='r':
	nelem=n
else:
	nelem=n-1

#print npart,nelem

#y=Axis('r',4,0.,1.,'fem')#+Axis('r',2,1.,2.,'fem')

#print 

#v,d=y.val(.01)

#plt.clf()
#plt.plot(t,V)
#plt.show()

#print y.overlap()

overlap=y.overlap()
overlap_inv=y.overlap_inv()

#a=np.random.rand(4,4)

#print y.overlap_inv()
#print y.overlap()

#y.plot()
#plt.show()

#d|d matrix
B=np.zeros([nelem,nelem])
iter1=0

#Coefficient Matrix
U=np.zeros(nelem)

for e in y.e:
#	for b in e.b:
	m=e.matrix('d|d')
	iter2=int(np.sqrt(np.size(m)))
	for k1 in range(0,iter2):
		for k2 in range(0,iter2):
			B[iter1+k1,iter1+k2]=B[iter1+k1,iter1+k2]+m[k1][k2]
	iter1=iter1+iter2-1

#print iter1
#print B
#print myPi
#[P,L,U]=la.lu(np.dot(overlap_inv,B))

[evals,evecs]=la.eig(B,overlap)

print evals
print evecs
#print overlap

nsols=len(evals)

#axis vector
t=np.linspace(0,1,500)

#Wavefunction vector
wavefun=np.zeros(500)

#iter3=0

for e in y.e:
#	print e.val(.21)
	for k in range(0,500):
		iter4=0
		if t[k]>e.x0 and t[k]<e.x1:
			v,d=e.val(t[k])
			for iter3 in range(0,len(v)):
				wavefun[k]=wavefun[k]-evecs[nelem-1][iter4]*v[iter3]

#plt.plot(t,wavefun)
#y.plot()
#plt.show()
